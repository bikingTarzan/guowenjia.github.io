<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>2018-06-01上线反思</title>
      <link href="/2018/06/01/2018.06.01%E4%B8%8A%E7%BA%BF%E5%8F%8D%E6%80%9D/"/>
      <url>/2018/06/01/2018.06.01%E4%B8%8A%E7%BA%BF%E5%8F%8D%E6%80%9D/</url>
      <content type="html"><![CDATA[<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>儿童节快乐！昨天慌慌张张写的脚本上线了，出了点问题。还没查到原因。但是配置的过程中走了不少弯路。这里记录一下，再上线脚本的时候要好好思考之后再弄。</p><p>1.上线之前我需要先把脚本跑起来，然后老大合并代码之后，我拉取git上最新的代码。</p><p>昨天的一个很大的问题，是我只顾跑脚本，没有合代码，然后脚本就异常了！！！因为之前有这个脚本，所以我找了好久都没找到问题。 下次要列出清单。一步一步做，防止丢三落四。</p><h2 id="再次需要重申的知识点"><a href="#再次需要重申的知识点" class="headerlink" title="再次需要重申的知识点:"></a>再次需要重申的知识点:</h2><pre><code>supervisor 里面的部署，路径。一定要实际去跑一下看看，看是否能够运行起来，运行的是否正确。修改配置之后，一定要记得update然后在restart.在代码出现问题的时候，git上面可以找一下之前的历史，然后git reset --hard 版本号 到之前的历史版本, 就可以了。git reflog 可以查看当前分支之前的所有操作。git log --pretty=oneline file 可以查看一个文件的所有历史提交记录.linux 里面的grep. 如果需要查找当前的下面5行，grep &quot;need_find_thing&quot; -A 5 filename如果需要查找当前的上面5行，grep &quot;need_find_thing&quot; -B 5 filename如果需要查找当前的上面和下面各5行，grep &quot;need_find_thing&quot; -C 5 filenamegrep &quot;test&quot; . -r -n  在多级目录中对文本进行递归操作echo &quot;hello world&quot; | grep -i &quot;HELLO&quot; # 忽略匹配样式中的字符大小写</code></pre>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> supervisor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018-05-31 学习笔记</title>
      <link href="/2018/05/31/2018-05-31-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/31/2018-05-31-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="vim-相关的"><a href="#vim-相关的" class="headerlink" title="vim 相关的:"></a>vim 相关的:</h2><h3 id="vim命令行下的操作"><a href="#vim命令行下的操作" class="headerlink" title="vim命令行下的操作"></a>vim命令行下的操作</h3><p>每行的行首都添加一个字符串：%s/^/要插入的字符串<br>每行的行尾都添加一个字符串：%s/$/要插入的字符串</p><p>解释：</p><pre><code>% 代表针对被编辑文件的每一行进行后续操作$ 代表一行的结尾处^ 代表一行的开头处</code></pre><h3 id="命令行中的-Vi-模式"><a href="#命令行中的-Vi-模式" class="headerlink" title="命令行中的 Vi 模式"></a>命令行中的 Vi 模式</h3><p>Bash shell 提供了两种模式用于命令行编辑：emacs 和 vi。默认情况下是 Emacs 编辑模式，可以使用以下方式将其更改为 vi 模式：</p><pre><code>set -o vi</code></pre><p>在命令行中，可以按下 ESC 键进入 vi 编辑模式，并使用 vi 的单行编辑功能。在命令行中的 vi 编辑模式下，可以通过按下 v 弹出编辑器，这样就可以编辑和保存将在命令行中执行的缓冲。</p><p>如果需要回到 emacs 模式，输入：</p><pre><code>set -o emacs</code></pre><a id="more"></a><h3 id="多个文件中执行宏操作"><a href="#多个文件中执行宏操作" class="headerlink" title="多个文件中执行宏操作"></a>多个文件中执行宏操作</h3><p>我们已经录制好了一个宏，并且希望在多个文件中运行它。首先我们需要使用文件构建一个参数列表，例如，从一个 Rails 应用中加载所有模型：</p><pre><code>:args app/models/*.rb</code></pre><p>然后使用下面的命令运行宏（记录在寄存器 a 中）：</p><pre><code>:argdo normal @a</code></pre><p>最后，使用下面的命令保存所有的缓冲：</p><pre><code>:argdo update</code></pre><p><a href="https://zhuanlan.zhihu.com/p/27968721" target="_blank" rel="noopener">摘自知乎</a></p><h2 id="redis相关的"><a href="#redis相关的" class="headerlink" title="redis相关的:"></a>redis相关的:</h2><p>mset 同时设置一个或多个key-value对。<br>如果某个给定key已经存在，那么MSET会用新值覆盖旧值。<br>msetnx 和 mset相似，但是它只会对不存在key的设置，存在无法设置。</p><h3 id="mset用例-这里就好比python里的列表"><a href="#mset用例-这里就好比python里的列表" class="headerlink" title="mset用例(这里就好比python里的列表):"></a>mset用例(这里就好比python里的列表):</h3><pre><code>MSET date &quot;2012.3.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;MGET date time weather1) &quot;2012.3.30&quot;2) &quot;11:00 a.m.&quot;3) &quot;sunny&quot;redis&gt; SET google &quot;google.hk&quot;OKredis&gt; MSET google &quot;google.com&quot;OKredis&gt; GET google&quot;google.com&quot;</code></pre><h3 id="msetnx用例-这里就好比python里的元组"><a href="#msetnx用例-这里就好比python里的元组" class="headerlink" title="msetnx用例(这里就好比python里的元组):"></a>msetnx用例(这里就好比python里的元组):</h3><pre><code>redis&gt; MSETNX rmdbs &quot;MySQL&quot; nosql &quot;MongoDB&quot; key-value-store &quot;redis&quot;(integer) 1redis&gt; MGET rmdbs nosql key-value-store1) &quot;MySQL&quot;2) &quot;MongoDB&quot;3) &quot;redis&quot;redis&gt; MSETNX rmdbs &quot;Sqlite&quot; language &quot;python&quot;  # rmdbs 键已经存在，操作失败(integer) 0redis&gt; EXISTS language                          # 因为 MSET 是原子性操作，language 没有被设置(integer) 0redis&gt; GET rmdbs                                # rmdbs 也没有被修改&quot;MySQL&quot;</code></pre><h2 id="git相关的"><a href="#git相关的" class="headerlink" title="git相关的:"></a>git相关的:</h2><pre><code>我经常出现代码改完了发现分支错了的情况，这种情况怎么解决?前提是尚未将修改提交到错误的分支.git stashgit checkout targetbranchgit stash popgit add .git commit -m xxx第一步:将修改的代码暂存到stash第二步:切换到正确的分支第三步:从stash中取出暂存的代码修改至此,对代码的改动，就由错误的分支移动到了正确的分支.把当前未提交到本地（和服务器）的代码推入到 Git 的栈中：$ git stash将以前存放的代码应用回来$ git stash apply 或者使用 $ git stash pop区别 pop 会删除栈里面数据 apply 会保留数据将当前的 Git 栈信息打印出来$ git stash list将你指定版本号为stash@{1}的工作取出来$ git stash apply stash@{1}将栈清空$ git stash clear</code></pre>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> vim </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo搭建笔记</title>
      <link href="/2018/05/30/hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/30/hexo%E6%90%AD%E5%BB%BA%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>这两天在搭建自己的博客，用到了很多的东西，这里整理一下。<br><a href="http://www.joryhe.com/2016-05-12-git_and_hexo_create_blog.html" target="_blank" rel="noopener">很不错的搭建hexo博客</a><br><a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">实用的小图标</a><br><a href="http://shenzekun.cn/hexo%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.html" target="_blank" rel="noopener">next主题炫酷的动态背景</a><br><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">hexo很炫的一些小技巧</a><br><a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="noopener">hexo统计字数,阅读时长</a></p><p>goodluck!</p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今日反思</title>
      <link href="/2018/05/29/2018-05-29/"/>
      <url>/2018/05/29/2018-05-29/</url>
      <content type="html"><![CDATA[<h2 id="今天完成的工作"><a href="#今天完成的工作" class="headerlink" title="今天完成的工作:"></a>今天完成的工作:</h2><pre><code>完成了七牛图片的处理(最大尺寸和瘦身)完成了image新增一个字段，以及发布一张图片的时候，存储当前图片的size.</code></pre><h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点:"></a>问题点:</h2><pre><code>图片处理的时候，没有根据当前的业务去思考，一味的根据之前的代码去做在已有图片的时候去修改最大尺寸和瘦身，获取key的时候忽略了http和https,导致切出来的key错误。dna脚本部分的代码因为没有考虑其他彩种情况导致出现了一些异常。</code></pre><a id="more"></a><h2 id="需要反思的地方"><a href="#需要反思的地方" class="headerlink" title="需要反思的地方:"></a>需要反思的地方:</h2><pre><code>调试的时候，真的看不出来问题的时候，就一行一行的打印日志，查看每一步的结果。如果有业务逻辑没有看懂，就要抓紧时间问，避免重复返工。</code></pre><p>今天下午的bug卡了很长时间，今天弄好了博客的评论功能。用了一下还不错。grep 很久不用现在都生疏了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;xxxx&quot; file                                # 这个直接查找文本里面的xxxx</span><br><span class="line">grep &quot;xxxx&quot; file | grep &quot;yyyy&quot;                  # 这个是多条件查找，同时匹配</span><br><span class="line">grep -E &quot;word1|word2|word3&quot;   file.txt          # 这个只需要满足一个就可以了。</span><br></pre></td></tr></table></figure></p><p>接下来要抽空多看英语，英语忘完了感觉。。。git软件开发实战今天都没空看。 时间没有规划好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard  # 如果git pull 的时候报错，或者本地编辑了，已经commit了，还没有提交远端分支，就用这个。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 反思 </tag>
            
            <tag> git </tag>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>昨日反思</title>
      <link href="/2018/05/29/2018-05-28/"/>
      <url>/2018/05/29/2018-05-28/</url>
      <content type="html"><![CDATA[<h2 id="昨天完成的工作"><a href="#昨天完成的工作" class="headerlink" title="昨天完成的工作:"></a>昨天完成的工作:</h2><pre><code>- 完成了号码dna的脚本编写。</code></pre><h2 id="问题点"><a href="#问题点" class="headerlink" title="问题点:"></a>问题点:</h2><pre><code>- 代码中引入了rabbitmq队列机制，主要目的就是在读操作的时候避免写操作。把写操作放入队列里面运行。- 忽略的一个问题就是我是根据传给客户端的数据来放入队列的，这会造成一个并发的问题。- 解决这一个问题，最好的方式就是直接读取数据库中的数据，因为队列里面如果执行的慢，会出现同时读入两个插入操作。- 但是业务逻辑是如果没有就插入，有就删除。</code></pre><a id="more"></a><h2 id="需要反思的地方"><a href="#需要反思的地方" class="headerlink" title="需要反思的地方:"></a>需要反思的地方:</h2><pre><code>- 我过多的关注了返给客户端的数据，没有理清楚它们之间的关系其实是可以分开的。- 代码逻辑还是没有弄的足够的清楚，代码看的不够细致。</code></pre><p>昨天尝试使用hexo和github来搭建自己的博客，感觉这个确实很赞，作为记录自己日常生活的个人天地，确实很不错。以后会尽量的把文章发在这个上面，同时弄清楚更多hexo的使用技巧。</p>]]></content>
      
      
        <tags>
            
            <tag> 反思 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fluently_python读书笔记</title>
      <link href="/2018/05/28/fluently_python%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/28/fluently_python%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="1-第一个python问题"><a href="#1-第一个python问题" class="headerlink" title="1.第一个python问题"></a>1.第一个python问题</h2><p>流畅的python里面14章  可迭代的对象，迭代器，生成器里面，最后一个延伸阅读，里面列举了这样一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def f(): x=0</span><br><span class="line">    while True:</span><br><span class="line">        x += 1</span><br><span class="line">        yield x</span><br></pre></td></tr></table></figure><p>论文的作者指出，我们无法通过函数调用抽象产出这个过程。<br>然后论文的作者做了一个变化，变成下面的例子来简单地抽象产出这个过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def f():</span><br><span class="line">    def do_yield(n):</span><br><span class="line">        yield n</span><br><span class="line">    x = 0</span><br><span class="line">    while True:</span><br><span class="line">        x += 1</span><br><span class="line">        do_yield(x)</span><br></pre></td></tr></table></figure><p>这样会得到一个无限的循环，而不是生成器。</p><p>如果调用示例 14-24 中的 f(),会得到一个无限循环,而不是生成<br>器,因为 yield 关键字只能把最近的外层函数变成生成器函数。<br>虽然生成器函数看起来像函数,可是我们不能通过简单的函数调用<br>把职责委托给另一个生成器函数。<br><a id="more"></a><br>而必须使用yield from 才能解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def f():</span><br><span class="line">    def do_yield(n):</span><br><span class="line">        yield n</span><br><span class="line">    x = 0</span><br><span class="line">    while True:</span><br><span class="line">        x += 1</span><br><span class="line">        yield from do_yield(x)</span><br></pre></td></tr></table></figure><p>然后作者后面列举了一个斐波那契数列，实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fibonacci():</span><br><span class="line">    a, b = 0, 1</span><br><span class="line">    while True:</span><br><span class="line">        yield a</span><br><span class="line">        a, b = b, a + b</span><br></pre></td></tr></table></figure><p>这个和上面第一个列举的例子有什么区别？<br>而且yield from 和 yield 在这个里面的区别在哪？</p><h2 id="第二个问题："><a href="#第二个问题：" class="headerlink" title="第二个问题："></a>第二个问题：</h2><p>猴子补丁问题。（第15章，上下文管理器和else块）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class LookingGlass:</span><br><span class="line">    def __enter__(self): ➊</span><br><span class="line">        import sys</span><br><span class="line">        self.original_write = sys.stdout.write ➋</span><br><span class="line">        sys.stdout.write = self.reverse_write ➌ # 在这个地方使用猴子补丁，替换成自己编写的方法。</span><br><span class="line">        return &apos;JABBERWOCKY&apos; ➍</span><br><span class="line">        </span><br><span class="line">    def reverse_write(self, text): ➎</span><br><span class="line">        self.original_write(text[::-1])</span><br><span class="line">        </span><br><span class="line">    def __exit__(self, exc_type, exc_value, traceback):</span><br><span class="line">        import sys ➐</span><br><span class="line">        sys.stdout.write = self.original_write ➑</span><br><span class="line">        if exc_type is ZeroDivisionError: ➒</span><br><span class="line">            print(&apos;error&apos;)</span><br></pre></td></tr></table></figure><p>在➌处使用了猴子补丁，在python3里面运行没有问题，但是放到python2里面，会报write方法是只读的？ 原因是因为python2和python3,write方法不一样？还是python2不支持猴子补丁？</p><p>python2会报如下错误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: &apos;file&apos; object attribute &apos;write&apos; is read-only</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 流畅的python </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
